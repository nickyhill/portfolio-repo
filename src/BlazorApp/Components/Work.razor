@inject IJSRuntime JSRuntime


<section class="light" id="work">
    <script type="text/javascript" src="js/site.js"></script>
    <h2 style="cursor: pointer;" @onclick="ToggleWork">
        Work Experience <span id="arrowWork" style="font-weight: bold; font-size: 20px;">â–¶</span>
    </h2>

    <div class="work-container" style="display: none; margin: 0 auto; width: fit-content;">
        @if (workme is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="sub-work-container">
                @foreach (var job in workme)
                {
                    <ul style="list-style-type: none; text-align: left; font-size: 1.10rem; margin: 10px 20px; gap: 30px;">
                        <li style="font-weight: bold;">: @job.Company</li>
                        <li><span style="color: black;">- </span>@job.Position</li>
                        <li><span style="color: black;">- </span>@job.TimeFrame</li>
                        <li>@job.Description</li>
                    </ul>
                }
            </div>
        }
    </div>
</section>




@code {
    [Parameter, EditorRequired]
    public required HttpClient Http { get; set; }

    [Parameter, EditorRequired]
    public required HeroImageService HeroImageService { get; set; }

    private List<WorkMe>? workme;
    private HeroImage? hero;
    private bool isWorkVisible = false;

    protected override async Task OnInitializedAsync()
    {
        workme = await Http.GetFromJsonAsync<List<WorkMe>>("sample-data/work.json");
        hero = await HeroImageService.GetHeroAsync(img => img.Name is "about");
    }

    private async Task ToggleWork()
    {
        await JSRuntime.InvokeVoidAsync("toggleWork");
    }
}
